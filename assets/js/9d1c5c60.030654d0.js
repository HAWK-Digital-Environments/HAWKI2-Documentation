"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[446],{7239:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"HAWKI/Architecture/Usage Record","title":"Usage Record","description":"Overview","source":"@site/docs/HAWKI/3-Architecture/9-Usage Record.md","sourceDirName":"HAWKI/3-Architecture","slug":"/HAWKI/Architecture/Usage Record","permalink":"/HAWKI2-Documentation/HAWKI/Architecture/Usage Record","draft":false,"unlisted":false,"editUrl":"https://github.com/hawk/your-project/edit/main/docs/HAWKI/3-Architecture/9-Usage Record.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"HAWKI_Sidebar","previous":{"title":"dot Env","permalink":"/HAWKI2-Documentation/HAWKI/Architecture/dot Env"},"next":{"title":"Deployment","permalink":"/HAWKI2-Documentation/category/deployment"}}');var i=r(4848),o=r(8453);const t={sidebar_position:9},c=void 0,d={},a=[{value:"Overview",id:"overview",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Database Schema",id:"database-schema",level:2},{value:"Usage Recording Process",id:"usage-recording-process",level:2},{value:"When Records Are Created",id:"when-records-are-created",level:3},{value:"Record Creation Logic",id:"record-creation-logic",level:3},{value:"Data Maintenance",id:"data-maintenance",level:2},{value:"Purpose",id:"purpose",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The UsageRecord model tracks usage of AI models in the HAWKI2 system, capturing token consumption for both prompts and completions."}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File:"})," ",(0,i.jsx)(n.code,{children:"/app/Models/Records/UsageRecord.php"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"class UsageRecord extends Model\n{\n    protected $fillable = [\n        'user_id',\n        'room_id',\n        'prompt_tokens',\n        'completion_tokens',\n        'model',\n        'type',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    public function room()\n    {\n        return $this->belongsTo(Room::class);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration:"})," ",(0,i.jsx)(n.code,{children:"/database/migrations/2025_02_06_103418_create_usage_records_table.php"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"usage_records"})," table consists of:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," - Primary key"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"user_id"})," - Foreign key to users table (nullable on user deletion)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"room_id"})," - Foreign key to rooms table (nullable on room deletion)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prompt_tokens"})," - Unsigned big integer tracking token count in prompts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"completion_tokens"})," - Unsigned big integer tracking token count in completions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," - Enum with values 'private' or 'group'"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model"})," - String identifier for the AI model used"]}),"\n",(0,i.jsxs)(n.li,{children:["Timestamps (",(0,i.jsx)(n.code,{children:"created_at"}),", ",(0,i.jsx)(n.code,{children:"updated_at"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage-recording-process",children:"Usage Recording Process"}),"\n",(0,i.jsx)(n.h3,{id:"when-records-are-created",children:"When Records Are Created"}),"\n",(0,i.jsx)(n.p,{children:"UsageRecords are created in the following scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Group Chat Interactions"}),"\nIn ",(0,i.jsx)(n.code,{children:"StreamController::handleGroupChatRequest()"}),", records are created after a group AI response is generated:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"$this->usageAnalyzer->submitUsageRecord($usage, 'group', $formattedPayload['model'], $room->id);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Private Chat Interactions"}),"\nIn ",(0,i.jsx)(n.code,{children:"StreamController::createRequest()"}),", records are created for private AI conversations:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"$this->usageAnalyzer->submitUsageRecord($usage, 'private', $formattedPayload['model']);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Streaming Responses"}),"\nDuring streaming responses in ",(0,i.jsx)(n.code,{children:"StreamController::createStream()"}),", usage records are submitted when usage data is available:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"if($usage){\n    $this->usageAnalyzer->submitUsageRecord($usage, 'private', $formattedPayload['model']);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"record-creation-logic",children:"Record Creation Logic"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"UsageAnalyzerService"})," handles the actual record creation through its ",(0,i.jsx)(n.code,{children:"submitUsageRecord"}),"\nmethod:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"public function submitUsageRecord($usage, $type, $model, $roomId = null) {\n    $userId = Auth::user()->id;\n\n    UsageRecord::create([\n        'user_id' => $userId,\n        'room_id' => $roomId,\n        'prompt_tokens' => $usage['prompt_tokens'],\n        'completion_tokens' => $usage['completion_tokens'],\n        'model' => $model,\n        'type' => $type,\n    ]);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-maintenance",children:"Data Maintenance"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"UsageAnalyzerService"})," includes a ",(0,i.jsx)(n.code,{children:"summarizeAndCleanup"})," method that:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Summarizes usage records from the previous month, grouped by user, room, type, and model"}),"\n",(0,i.jsx)(n.li,{children:"Deletes the old records after summarization"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This helps manage database size while preserving usage analytics data."}),"\n",(0,i.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsx)(n.p,{children:"The UsageRecord system enables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tracking AI token consumption on a per-user basis"}),"\n",(0,i.jsx)(n.li,{children:"Distinguishing between private and group usage"}),"\n",(0,i.jsx)(n.li,{children:"Model-specific usage tracking"}),"\n",(0,i.jsx)(n.li,{children:"Potential for billing or quota implementation"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);